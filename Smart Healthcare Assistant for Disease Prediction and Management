import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import shap
data = {
    'Age': [45, 34, 50, 60, 23, 75, 40, 33, 58, 65],
    'BloodPressure': [120, 130, 150, 140, 115, 160, 135, 125, 145, 155],
    'Cholesterol': [220, 210, 240, 245, 180, 230, 200, 210, 220, 240],
    'BloodGlucose': [90, 85, 110, 105, 92, 115, 100, 95, 120, 110],
    'HeartRate': [70, 72, 80, 75, 65, 85, 78, 72, 76, 82],
    'FamilyHistory': [1, 0, 1, 1, 0, 1, 0, 0, 1, 1],
    'Gender': [0, 1, 1, 0, 1, 0, 0, 1, 0, 1],
    'HeartDisease': [0, 0, 1, 1, 0, 1, 0, 0, 1, 1]
}
df = pd.DataFrame(data)
X = df.drop('HeartDisease', axis=1)
y = df['HeartDisease']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)
model = Sequential([
    Dense(64, input_dim=X_train_scaled.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer=Adam(), loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train_scaled, y_train, epochs=50, batch_size=10, validation_data=(X_test_scaled, y_test))

test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print(f'Test Accuracy: {test_accuracy:.4f}')
explainer = shap.KernelExplainer(model.predict, X_train_scaled)
shap_values = explainer.shap_values(X_test_scaled)
shap.summary_plot(shap_values, X_test)

def health_recommendation(age, blood_pressure, cholesterol, blood_glucose, family_history):
    if blood_pressure > 140 or cholesterol > 240 or blood_glucose > 110 or family_history == 1:
        return "You are at higher risk of heart disease. Please consider consulting a healthcare provider for further evaluation."
    elif age > 50:
        return "As you are above 50 years old, regular health checkups and maintaining a healthy lifestyle are recommended."
    else:
        return "You have a low risk for heart disease. Keep up your healthy habits!"

for i in range(len(X_test)):
    recommendation = health_recommendation(X_test.iloc[i]['Age'], X_test.iloc[i]['BloodPressure'],
                                           X_test.iloc[i]['Cholesterol'], X_test.iloc[i]['BloodGlucose'],
                                           X_test.iloc[i]['FamilyHistory'])
    print(f"Recommendation for patient {i+1}: {recommendation}")
